import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../store';
import { search, SearchCondition } from '../apis/opendata-api';

const STORE_NAME = 'opendata';

export interface opendatasState {
  status: 'idle' | 'loading' | 'failed';
  opendata: opendata
}

export interface opendata{
  type: string,
  name: string,
  crs: any,
  features: [{
    type: string,
    properties: {
      gid: string,
      genshoname: string,
      kubun: string,
    },
    geometry: {
      type: string,
      coordinates: Array<Array<Array<number>>>
    }
  }]
}

const initialState: opendatasState = {
  status: 'idle',
  opendata: {
    type: '',
    name: '',
    crs: {},
    features: [{
      type: '',
      properties: {
        gid: '',
        genshoname: '',
        kubun: ''
      },
      geometry: {
        type: 'Polygon',
        coordinates: [[[35.810913836510657,139.230962709378929]]]
      }
    }]
  }
};


// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const searchOpendataAsync = createAsyncThunk(
  STORE_NAME + '/searchOpendata',
  async (condition:SearchCondition) => {
    const response = await search(condition);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);


export const opendataSlice = createSlice({
  name: STORE_NAME,
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  } ,
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(searchOpendataAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(searchOpendataAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.opendata = action.payload;
      })
      .addCase(searchOpendataAsync.rejected, (state) => {
        state.status = 'failed';
      })
  }
});


export const selectOpendata = (state: RootState) => state.opendata.opendata;

export default opendataSlice.reducer;

