import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from 'store';
import { opendataApi } from 'apis';
import { SearchCondition } from 'apis/opendata-api';
import { EvacuationArea, EvacuationCenter, OpenData } from 'schema';

const STORE_NAME = 'opendata';

export interface opendataState {
  status: 'idle' | 'loading' | 'failed';
  evacuationAreas: Array<EvacuationArea>;
  evacuationCenters: Array<EvacuationCenter>;
  opendata: OpenData;
}

const initialState: opendataState = {
  status: 'idle',
  evacuationAreas: [
    {
      避難場所_名称: '',
      地方公共団体コード: 0,
      都道府県: '',
      指定区市町村名: '',
      住所: '',
      緯度: 0,
      経度: 0,
    },
  ],
  evacuationCenters: [
    {
      避難所_名称: '',
      地方公共団体コード: 0,
      都道府県: '',
      指定区市町村名: '',
      住所: '',
      緯度: 0,
      経度: 0,
    },
  ],
  opendata: {
    type: '',
    name: '',
    crs: '',
    features: [
      {
        type: '',
        properties: {
          gid: '',
          genshoname: '',
          kubun: '',
        },
        geometry: {
          type: '',
          coordinates: [[[1]]],
        },
      },
    ],
  },
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. Thisee
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchOpendata = createAsyncThunk(
  STORE_NAME + '/searchOpendata',
  async (condition: SearchCondition) => {
    const response = await opendataApi.search(condition);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const fetchEvacuationCenter = createAsyncThunk(
  STORE_NAME + '/evacuation/center',
  async () => {
    const response = await opendataApi.fetchEvacuationCenter();
    return response.data;
  }
);

export const fetchEvacuationArea = createAsyncThunk(
  STORE_NAME + '/evacuation/area',
  async () => {
    const response = await opendataApi.fetchEvacuationArea();
    return response.data;
  }
);

export const opendataSlice = createSlice({
  name: STORE_NAME,
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchOpendata.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchOpendata.fulfilled, (state, action) => {
        state.status = 'idle';
        state.opendata = action.payload;
      })
      .addCase(fetchOpendata.rejected, (state) => {
        state.status = 'failed';
      })
      .addCase(fetchEvacuationCenter.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchEvacuationCenter.fulfilled, (state, action) => {
        state.status = 'idle';
        state.evacuationCenters = action.payload;
      })
      .addCase(fetchEvacuationCenter.rejected, (state) => {
        state.status = 'failed';
      })
      .addCase(fetchEvacuationArea.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchEvacuationArea.fulfilled, (state, action) => {
        state.status = 'idle';
        state.evacuationAreas = action.payload;
      })
      .addCase(fetchEvacuationArea.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const selectOpendata = (state: RootState) => state.opendata.opendata;
export const selectEvacuationAreas = (state: RootState) =>
  state.opendata.evacuationAreas;
export const selectEvacuationCenters = (state: RootState) =>
  state.opendata.evacuationCenters;

export default opendataSlice.reducer;
