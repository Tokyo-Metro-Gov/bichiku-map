import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from 'store';
import { stockpileApi } from 'apis';
import { Stockpile } from 'schema';

const STORE_NAME = 'stockpile';

export interface StockpilesState {
  status: 'idle' | 'loading' | 'failed';
  stockpileList: Array<Stockpile>;
}

const initialState: StockpilesState = {
  status: 'idle',
  stockpileList: [
    {
      id: 1,
      name: '',
      stockQuantity: 1,
      lat: 35.666452,
      lng: 139.31582,
      address: '',
      registrationDate: '',
      expiryDate: '',
    },
  ],
};

export const fetchStockpile = createAsyncThunk(
  STORE_NAME + '/stockpiles',
  async () => {
    const response = await stockpileApi.fetchStockpile();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const StockPileSlice = createSlice({
  name: STORE_NAME,
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchStockpile.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchStockpile.fulfilled, (state, action) => {
        state.status = 'idle';
        state.stockpileList = action.payload;
      })
      .addCase(fetchStockpile.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const selectStockpileList = (state: RootState) =>
  state.stockpile.stockpileList;

export default StockPileSlice.reducer;
