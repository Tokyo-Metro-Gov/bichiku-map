import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from 'store';
import { search, SearchCondition } from 'apis/openstreetmap-api';
import { LatLngLiteral } from 'leaflet';

import { MapElement } from 'schema';

const STORE_NAME = 'openstreetmap';

export interface OpenStreetMapState {
  status: 'idle' | 'loading' | 'failed';
  currentLocation: LatLngLiteral;
  mapCenterPosition: LatLngLiteral;
  mapElements: Array<MapElement>;
}

const initialPosition: LatLngLiteral = {
  lat: 35.666452,
  lng: 139.31582,
};

const initialState: OpenStreetMapState = {
  status: 'idle',
  currentLocation: initialPosition,
  mapCenterPosition: initialPosition,
  mapElements: [
    {
      id: 1,
      lat: 35.666452,
      lon: 139.31582,
      tags: '',
      type: '',
    },
  ],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchOpenStreetMap = createAsyncThunk(
  STORE_NAME + '/search',
  async (condition: SearchCondition) => {
    const response = await search(condition);
    // The value we return becomes the `fulfilled` action payload
    return response.data.elements;
  }
);

export const openstreetmapSlice = createSlice({
  name: STORE_NAME,
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setCurrentLocation: (state, action: PayloadAction<LatLngLiteral>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.currentLocation = action.payload;
    },
    setMapCenterPosition: (state, action: PayloadAction<LatLngLiteral>) => {
      state.mapCenterPosition = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchOpenStreetMap.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchOpenStreetMap.fulfilled, (state, action) => {
        state.status = 'idle';
        state.mapElements = action.payload;
      })
      .addCase(fetchOpenStreetMap.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const selectMapElements = (state: RootState) =>
  state.openstreetmap.mapElements;
export const selectCurrentLocation = (state: RootState) =>
  state.openstreetmap.currentLocation;
export const selectMapCenterPosition = (state: RootState) =>
  state.openstreetmap.mapCenterPosition;

export const { setCurrentLocation, setMapCenterPosition } =
  openstreetmapSlice.actions;

export default openstreetmapSlice.reducer;
